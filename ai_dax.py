import openai
import pandas as pd
import streamlit as st
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã Streamlit –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
openai.api_key = st.secrets["openai"]["api_key"]

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (SQL –∏–ª–∏ DAX), —É—á–∏—Ç—ã–≤–∞—é—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
def generate_query(user_query, df=None, mode="SQL"):
    system_prompt = {
        "SQL": """You are a helpful assistant that translates natural language into SQL queries.
Use correct logic for metrics like AOV (average order value = total revenue divided by number of distinct orders).
Use window functions when needed for cumulative calculations.
Always check for DISTINCT in aggregations when counting IDs like orders or customers.""",
        "DAX": "You are a helpful assistant that generates DAX formulas based on user requests."
    }
    prefix = {
        "SQL": "You are a helpful assistant that translates natural language into SQL queries. Use window functions like SUM() OVER for cumulative totals when needed. Assume the table includes fields like 'Date' or 'ID' for ordering.",
        "DAX": "Generate a DAX formula using the columns from this table: "
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    schema_info = ""
    if df is not None:
        columns = df.columns.tolist()
        schema_info = "Columns: " + ", ".join(columns)

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{
                "role": "system", "content": system_prompt[mode]
            }, {
                "role": "user", "content": f"{prefix[mode]} {schema_info}\nRequest: {user_query}"
            }],
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {e}"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel –∏–ª–∏ CSV
def load_data():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª CSV –∏–ª–∏ Excel", type=["csv", "xlsx"])
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file) if uploaded_file.name.endswith(".xlsx") else pd.read_csv(uploaded_file)
            st.write("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            st.dataframe(df)
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    return None

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit
def main():
    st.title("üß† AI Assistant: SQL & DAX Generator")

    df = load_data()
    if df is not None:
        query_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞", ["SQL", "DAX"])
        user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")

        if user_query:
            result = generate_query(user_query, df=df, mode=query_type)
            if result.startswith("Error"):
                st.error(result)
            else:
                label = "SQL-–∑–∞–ø—Ä–æ—Å" if query_type == "SQL" else "DAX-—Ñ–æ—Ä–º—É–ª–∞"
                st.subheader(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {label}:")
                st.code(result, language="sql" if query_type == "SQL" else "text")
                st.info(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {label} –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ.")

if __name__ == "__main__":
    main()
