import openai
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import os

from smolagents import CodeAgent, OpenAIServerModel

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit.")
    st.stop()

model = OpenAIServerModel(
    model_id="gpt-4o",
    client_kwargs={"api_key": api_key}
)
agent = CodeAgent(model=model, tools=[])

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∏–ª–∏ DAX –∑–∞–ø—Ä–æ—Å–æ–≤
def generate_query(user_query, df, mode="SQL"):
    columns = ", ".join(df.columns)
    
    if mode == "SQL":
        prompt = f"""
You are an expert assistant in writing SQL queries.

The available columns are: {columns}.

Translate the following user request into a SQL query.

The SQL query MUST strictly follow this structure:
1. SELECT required columns or aggregations
2. FROM the available dataset
3. WHERE if logical
3. GROUP BY if needed (even if the user does not mention it)
4. ORDER BY if logical

Only output the raw SQL code inside a code block.
User request:
{user_query}
"""
    elif mode == "DAX":
        prompt = f"""
You are an expert assistant in writing DAX formulas for Power BI.

The available columns are: {columns}.

Translate the following user request into a valid DAX formula.

Use proper DAX functions such as SUMMARIZE, CALCULATE, FILTER, or others depending on the request.
The formula should be clean, efficient, and ready to use in Power BI.

Only output the raw DAX code inside a code block.
User request:
{user_query}
"""

    try:
        response = agent.run(prompt)
        if isinstance(response, dict):
            response = response.get("output", "")
        elif isinstance(response, list):
            response = "\n".join(str(x) for x in response)
        return response.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {mode}: {e}"


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª", type=["csv", "xlsx"])
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file) if uploaded_file.name.endswith(".xlsx") else pd.read_csv(uploaded_file)
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            st.dataframe(df)
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_chart(df, chart_type, x_col, y_col):
    if chart_type == "Line Chart":
        st.line_chart(df[[x_col, y_col]])
    elif chart_type == "Bar Chart":
        st.bar_chart(df[[x_col, y_col]])
    elif chart_type == "Histogram":
        fig, ax = plt.subplots()
        ax.hist(df[y_col], bins=20)
        ax.set_xlabel(y_col)
        ax.set_ylabel('Frequency')
        st.pyplot(fig)
    elif chart_type == "Pie Chart":
        fig, ax = plt.subplots()
        df[y_col].value_counts().plot.pie(ax=ax, autopct='%1.1f%%')
        st.pyplot(fig)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.title("ChatGPT for SQL & DAX + Chart Maker")

    df = load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if df is None:
        return

    tab1, tab2 = st.tabs(["üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL/DAX", "üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL/DAX –∑–∞–ø—Ä–æ—Å–æ–≤
    with tab1:
        st.header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∏–ª–∏ DAX –∑–∞–ø—Ä–æ—Å–æ–≤")
        user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:")
        mode = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞", ["SQL", "DAX"])

        if user_query:
            if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å"):
                query_result = generate_query(user_query, df, mode)
                if "–û—à–∏–±–∫–∞" in query_result:
                    st.error(query_result)
                else:
                    st.subheader(f"{mode} –∑–∞–ø—Ä–æ—Å:")
                    st.code(query_result, language="sql" if mode == "SQL" else "text")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    with tab2:
        st.header("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        
        chart_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["Line Chart", "Bar Chart", "Histogram", "Pie Chart"])

        x_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ X", df.columns)
        y_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ Y", df.columns)

        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            create_chart(df, chart_type, x_col, y_col)

if __name__ == "__main__":
    main()
